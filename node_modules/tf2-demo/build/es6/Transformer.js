import { MessageType } from './Data/Message';
import { Encoder } from './Encoder';
import { Parser } from './Parser';
export function nullTransform(input) {
    return input;
}
export class Transformer extends Parser {
    constructor(sourceStream, targetStream) {
        super(sourceStream);
        this.encoder = new Encoder(targetStream);
    }
    transform(packetTransform, messageTransform) {
        this.encoder.encodeHeader(this.getHeader());
        for (const message of this.iterateMessages()) {
            this.parserState.handleMessage(message);
            if (message.type === MessageType.Packet) {
                for (const packet of message.packets) {
                    this.parserState.handlePacket(packet);
                }
                message.packets = message.packets.map(packetTransform);
            }
            this.encoder.writeMessage(messageTransform(message));
        }
    }
}
//# sourceMappingURL=Transformer.js.map