import { MessageType } from './Data/Message';
import { ParserState } from './Data/ParserState';
import { messageHandlers } from './Parser';
import { encodeHeader } from './Parser/Header';
export class Encoder {
    constructor(stream) {
        this.stream = stream;
        this.parserState = new ParserState();
    }
    encodeHeader(header) {
        encodeHeader(header, this.stream);
    }
    writeMessage(message) {
        this.stream.writeUint8(message.type);
        const handler = messageHandlers.get(message.type);
        if (!handler) {
            throw new Error(`No handler for message of type ${MessageType[message.type]}`);
        }
        handler.encodeMessage(message, this.stream, this.parserState);
        this.handleMessage(message);
    }
    handleMessage(message) {
        this.parserState.handleMessage(message);
        if (message.type === MessageType.Packet) {
            for (const packet of message.packets) {
                this.parserState.handlePacket(packet);
            }
        }
    }
}
//# sourceMappingURL=Encoder.js.map