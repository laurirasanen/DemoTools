import * as assert from 'assert';
import { BitStream } from 'bit-buffer';
import { deepEqual } from '../../deepEqual';
export function getStream(data) {
    if (typeof data === 'string') {
        const buffer = new Buffer(data + '\0remaining dummy data');
        return new BitStream(buffer);
    }
    else {
        const array = new Uint8Array(data);
        return new BitStream(array.buffer);
    }
}
export function assertEncoder(parser, encoder, data, length = 0, message = '', state) {
    const stream = new BitStream(new ArrayBuffer(length + 64000));
    encoder(data, stream, state);
    const pos = stream.index;
    if (length) {
        assert.equal(stream.index, length, 'Unexpected number of bits used for encoding' + message);
    }
    stream.index = 0;
    const result = parser(stream);
    if (!deepEqual(result, data)) {
        assert.deepEqual(result, data, 'Re-decoded value not equal to original value' + message);
    }
    assert.equal(stream.index, pos, 'Number of bits used for encoding and parsing not equal' + message);
}
export function assertReEncode(parser, encoder, stream) {
    const start = stream.index;
    const result = parser(stream);
    const encodeStream = new BitStream(new ArrayBuffer(stream.index));
    const end = stream.index;
    const length = end - start;
    stream.index = start;
    const byteLength = Math.floor((end - start) / 8);
    encoder(result, encodeStream);
    assert.equal(encodeStream.index, length, 'Unexpected number of bits used for encoding');
    encodeStream.index = 0;
    const encodeData = encodeStream.readArrayBuffer(byteLength);
    const originalData = stream.readArrayBuffer(byteLength);
    for (let i = 0; i < byteLength; i++) {
        if (originalData[i] !== encodeData[i]) {
            assert.fail(`Data differs at byte ${i} out of ${byteLength}: ${originalData[i].toString(2)} !== ${encodeData[i].toString(2)}`);
        }
    }
    assert.deepEqual(encodeData, originalData);
    if (length - 8 * byteLength > 0) {
        assert.deepEqual(encodeStream.readBits(length - 8 * byteLength), stream.readBits(length - 8 * byteLength));
    }
}
export function assertParser(parser, stream, expected, length, state) {
    const start = stream.index;
    const result = parser(stream, state);
    if (!deepEqual(result, expected)) {
        assert.deepEqual(result, expected);
    }
    assert.equal(stream.index - start, length, 'Unexpected number of bits consumed from stream');
}
//# sourceMappingURL=PacketTest.js.map