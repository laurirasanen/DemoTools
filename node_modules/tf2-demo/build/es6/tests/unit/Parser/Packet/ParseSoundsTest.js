import { EncodeParseSounds, ParseParseSounds } from '../../../../Parser/Packet/ParseSounds';
import { assertEncoder, assertParser, assertReEncode, getStream } from './PacketTest';
const data = [
    18,
    122,
    5,
    142,
    169,
    43,
    224,
    223,
    63,
    24,
    8,
    3,
    126,
    17,
    248,
    53,
    0,
    36,
    5,
    115,
    140,
    159,
    241,
    236,
    67,
    128,
    39,
    200,
    47,
    2,
    71,
    169,
    15,
    1,
    30,
    145,
    0,
    184,
    104,
    24,
    103,
    98,
    197,
    175,
    0,
    191,
    3,
    0,
    252,
    215,
    140,
    153,
    209,
    237,
    67,
    128,
    89,
    2,
    0,
    254,
    25,
    198,
    196,
    152,
    246,
    33,
    192,
    14,
    228,
    24,
    129,
    99,
    206,
    135,
    0,
    203,
    3,
    0,
    4,
    143,
    35,
    205,
    243,
    4,
    73,
    70,
    219,
    136,
    245,
    33,
    0
];
const soundData = [
    199,
    212,
    21,
    240,
    239,
    31,
    12,
    132,
    1,
    191,
    8,
    252,
    26,
    0,
    146,
    130,
    57,
    198,
    207,
    120,
    246,
    33,
    192,
    19,
    228,
    23,
    129,
    163,
    212,
    135,
    0,
    143,
    72,
    0,
    92,
    52,
    140,
    51,
    177,
    226,
    87,
    128,
    223,
    1,
    0,
    254,
    107,
    198,
    204,
    232,
    246,
    33,
    192,
    44,
    1,
    0,
    255,
    12,
    99,
    98,
    76,
    251,
    16,
    96,
    7,
    114,
    140,
    192,
    49,
    231,
    67,
    128,
    229,
    1,
    0,
    130,
    199,
    145,
    230,
    121,
    130,
    36,
    163,
    109,
    196,
    250,
    16,
    0
];
const soundStream = getStream(soundData).readBitStream(726 - 25);
suite('ParseSounds', () => {
    test('Parse parseSounds', () => {
        soundStream.index = 0;
        assertParser(ParseParseSounds, getStream(data), {
            packetType: 'parseSounds',
            reliable: false,
            num: 9,
            length: 701,
            data: soundStream
        }, 726);
    });
    test('Encode parseSounds', () => {
        soundStream.index = 0;
        assertEncoder(ParseParseSounds, EncodeParseSounds, {
            packetType: 'parseSounds',
            reliable: false,
            num: 9,
            length: 701,
            data: soundStream
        }, 726);
        soundStream.index = 0;
        assertEncoder(ParseParseSounds, EncodeParseSounds, {
            packetType: 'parseSounds',
            reliable: true,
            num: 1,
            length: 15,
            data: soundStream.readBitStream(15)
        }, 24);
    });
    test('Re-encode parseSounds', () => {
        assertReEncode(ParseParseSounds, EncodeParseSounds, getStream(data));
    });
});
//# sourceMappingURL=ParseSoundsTest.js.map