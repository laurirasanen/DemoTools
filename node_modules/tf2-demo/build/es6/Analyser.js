import { EventEmitter } from 'events';
import { Match } from './Data/Match';
import { MessageType } from './Data/Message';
export class Analyser extends EventEmitter {
    constructor(parser) {
        super();
        this.analysed = false;
        this.parser = parser;
        this.match = new Match(this.parser.parserState);
    }
    getHeader() {
        return this.parser.getHeader();
    }
    getBody() {
        if (!this.analysed) {
            for (const packet of this.getPackets()) {
                this.emit('packet', packet);
            }
            this.emit('done');
        }
        this.analysed = true;
        return this.match;
    }
    *getPackets() {
        for (const message of this.parser.getMessages()) {
            if (message.type === MessageType.Packet) {
                for (const packet of message.packets) {
                    this.match.handlePacket(packet, message);
                    yield packet;
                }
            }
        }
    }
}
//# sourceMappingURL=Analyser.js.map