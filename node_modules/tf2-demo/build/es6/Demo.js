import { BitStream } from 'bit-buffer';
import { Analyser } from './Analyser';
import { PacketTypeId } from './Data/Packet';
import { Parser } from './Parser';
export class Demo {
    static fromNodeBuffer(nodeBuffer) {
        return new Demo(nodeBuffer.buffer);
    }
    constructor(arrayBuffer) {
        this.stream = new BitStream(arrayBuffer);
    }
    getParser(fastMode = false) {
        if (!this.parser) {
            const skippedPackets = fastMode ? [
                PacketTypeId.packetEntities,
                PacketTypeId.tempEntities,
                PacketTypeId.entityMessage
            ] : [];
            this.parser = new Parser(this.stream, skippedPackets);
        }
        return this.parser;
    }
    getAnalyser(fastMode = false) {
        return new Analyser(this.getParser(fastMode));
    }
}
//# sourceMappingURL=Demo.js.map